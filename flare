#!/bin/sh
# Flare - A portable markdown notebook runner
# This script parses markdown files and executes code blocks based on tags

set -e

VERSION="0.1.0"

# Print usage information
print_usage() {
  echo "Flare - A portable markdown notebook runner v$VERSION"
  echo ""
  echo "Usage: flare [options] [subcommand]"
  echo ""
  echo "Options:"
  echo "  -f FILE    Specify a markdown file to use (default: README.md)"
  echo "  -h         Show this help message"
  echo ""
  echo "If no subcommand is provided, lists all available subcommands in the notebook."
  echo "If a subcommand is provided, executes all code blocks tagged with that subcommand."
  echo ""
  echo "Examples:"
  echo "  flare                     # List commands in README.md"
  echo "  flare test                # Run [test] blocks in README.md"
  echo "  flare -f notebook.md      # List commands in notebook.md"
  echo "  flare -f notebook.md test # Run [test] blocks in notebook.md"
}

# Find README.md (case insensitive)
find_readme() {
  for file in README.md README.MD Readme.md readme.md; do
    if [ -f "$file" ]; then
      echo "$file"
      return 0
    fi
  done
  echo "README.md"  # Default even if not found
}

# Parse command line arguments
NOTEBOOK=$(find_readme)  # Default to README.md
COMMAND=""

while [ $# -gt 0 ]; do
  case "$1" in
    -f)
      shift
      if [ $# -eq 0 ]; then
        echo "Error: -f option requires a file argument."
        exit 1
      fi
      NOTEBOOK="$1"
      shift
      ;;
    -h)
      print_usage
      exit 0
      ;;
    -*)
      echo "Error: Unknown option: $1"
      print_usage
      exit 1
      ;;
    *)
      # First non-option argument is the command
      COMMAND="$1"
      shift
      break
      ;;
  esac
done

# Check if notebook file exists
if [ ! -f "$NOTEBOOK" ]; then
  echo "Error: Notebook file '$NOTEBOOK' not found."
  exit 1
fi

# List all available commands in the notebook
list_commands() {
  echo "Available commands in $NOTEBOOK:"
  # Use grep to find all code blocks with tags, then extract just the tag names
  grep -o '\[[a-zA-Z0-9_-]*\]' "$NOTEBOOK" | sort | uniq | sed 's/\[//;s/\]//' | while read -r cmd; do
    echo "  $cmd"
  done
  printf "\nRun again with a command to execute the right code block.\n"
}

# Execute code blocks for a specific command
execute_command() {
  local command=$1
  local found=0
  local in_block=0
  local block=""
  local interpreter="/bin/sh"  # Default interpreter
  
  # Process the file line by line
  while IFS= read -r line || [ -n "$line" ]; do
    # Check for the start of a code block with our command
    if echo "$line" | grep -q "^\`\`\`.*\[$command\]"; then
      in_block=1
      found=1
      block=""
      
      # Extract the interpreter if specified
      if echo "$line" | grep -q "{.*}"; then
        interpreter=$(echo "$line" | sed 's/.*{\(.*\)}.*/\1/')
      fi
      continue
    fi
    
    # Check for the end of a code block
    if [ $in_block -eq 1 ] && echo "$line" | grep -q "^\`\`\`$"; then
      in_block=0
      
      # Create temporary file for the code block
      tempfile=$(mktemp)
      echo "$block" > "$tempfile"
      
      # Execute the code block with the specified interpreter
      echo "Executing $command block with $interpreter..."
      $interpreter "$tempfile"
      
      # Clean up
      rm "$tempfile"
      
      continue
    fi
    
    # Collect lines inside the code block
    if [ $in_block -eq 1 ]; then
      block="$block$line
"
    fi
  done < "$NOTEBOOK"
  
  if [ $found -eq 0 ]; then
    echo "Error: No code blocks found for command '$command'."
    echo "Available commands:"
    list_commands
    exit 1
  fi
}

# Main execution logic
if [ -z "$COMMAND" ]; then
  list_commands
else
  execute_command "$COMMAND"
fi